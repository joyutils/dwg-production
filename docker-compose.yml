version: "3.8"
services:
  joystream-node:
    image: joystream/node:latest
    restart: unless-stopped
    container_name: joystream-node
    volumes:
      - ${CHAIN_VOLUME}:/chain
    command: >
      --pruning=archive
      --ws-external
      --rpc-external
      --rpc-methods Safe
      --rpc-cors all
      --base-path /chain
      --chain /joystream/joy-mainnet.json
    ports:
      - "127.0.0.1:9944:9944"
      - "127.0.0.1:9933:9933"
      - 30333:30333

  db:
    image: postgres:14
    container_name: db
    restart: unless-stopped
    ports:
      - "127.0.0.1:${DB_PORT}:${DB_PORT}"
    volumes:
      - ${DATABASE_VOLUME}:/var/lib/postgresql/data
      - ./postgres.conf:/etc/postgresql/postgresql.conf
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASS}
      PGPORT: ${DB_PORT}
    command:
      [
        "postgres",
        "-c",
        "config_file=/etc/postgresql/postgresql.conf",
        "-p",
        "${DB_PORT}",
      ]

  graphql-server:
    image: joystream/query-node:1.6.0
    container_name: graphql-server
    restart: unless-stopped
    environment:
      - DB_HOST=db
      - DB_PASS=${DB_PASS}
      - DB_USER=${DB_USER}
      - DB_PORT=${DB_PORT}
      - DB_NAME=${PROCESSOR_DB_NAME}
      - GRAPHQL_SERVER_PORT=${GRAPHQL_SERVER_PORT}
      - GRAPHQL_SERVER_HOST=localhost
      # - WARTHOG_APP_PORT=${GRAPHQL_SERVER_PORT}
      # - WARTHOG_APP_HOST=graphql-server
      # Query node playground endpoint
      # Leave it blank if you want endpoint to be copied from browser's URL
      - GRAPHQL_PLAYGROUND_ENDPOINT=
      # Query node playground subscription endpoint
      # will be derived from GRAPHQL_PLAYGROUND_ENDPOINT when not set
      # - GRAPHQL_PLAYGROUND_SUBSCRIPTION_ENDPOINT=
      # URL for CDN serving QN Playground's JS/CSS files - set empty string for local file serving
      - GRAPHQL_PLAYGROUND_CDN_URL=
      - TYPEORM_LOGGING=error
      - PROCESSOR_HOST=processor
      - PROCESSOR_STATE_APP_PORT=${PROCESSOR_STATE_APP_PORT}
      # - ENABLE_TELEMETRY=${ENABLE_TELEMETRY:-no}
      - ENABLE_TELEMETRY=no # graphql-server generates a lot of traces, disabled for now
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://collector:4318
      - OTEL_RESOURCE_ATTRIBUTES=service.name=query-node,deployment.environment=production
      - NODE_ENV=${NODE_ENV}
    ports:
      - "${GRAPHQL_SERVER_PORT}:${GRAPHQL_SERVER_PORT}"
      - "127.0.0.1:${PROCESSOR_STATE_APP_PORT}:${PROCESSOR_STATE_APP_PORT}"
    depends_on:
      - db
    working_dir: /joystream
    entrypoint: bash
    command: >
      -c "yarn workspace query-node-root query-node:start:prod"

  processor:
    image: joystream/query-node:1.6.0
    container_name: processor
    restart: unless-stopped
    environment:
      - WARTHOG_DB_HOST=db
      - WARTHOG_DB_DATABASE=${PROCESSOR_DB_NAME}
      - WARTHOG_DB_USERNAME=${DB_USER}
      - WARTHOG_DB_PASSWORD=${DB_PASS}
      - WARTHOG_APP_PORT=4002
      - DB_HOST=db
      - DB_PASS=${DB_PASS}
      - DB_USER=${DB_USER}
      - DB_PORT=${DB_PORT}
      - DB_NAME=${PROCESSOR_DB_NAME}
      - INDEXER_ENDPOINT_URL=${PROCESSOR_INDEXER_GATEWAY}
      - TYPEORM_HOST=db
      - TYPEORM_DATABASE=${PROCESSOR_DB_NAME}
      - BATCH_SIZE=100
      - QUEUE_FACTOR=1
      - QUEUE_MAX_CAP_FACTOR=4
      - DEBUG=hydra-processor:event-queue
      - TYPEORM_LOGGING=error
      # State update endpoint used by prcessor (to send state updates)
      - STATE_UPDATE_ENDPOINT=http://graphql-server:${PROCESSOR_STATE_APP_PORT}/update-processor-state
      - NODE_ENV=${NODE_ENV}
    depends_on:
      - db
    working_dir: /joystream
    entrypoint: sh
    command: >
      -c "
        # We always run db setup script. If already exists or migrated no harm is done
        yarn workspace query-node-root db:prepare ;
        yarn workspace query-node-root db:migrate ;
        # We always reach here even if previous db prepare/migrate steps fail.
        yarn workspace query-node-root processor:start
      "

  indexer:
    image: joystream/hydra-indexer:v5.0.0-alpha.1
    container_name: indexer
    restart: unless-stopped
    environment:
      - DB_NAME=${INDEXER_DB_NAME}
      - DB_PASS=${DB_PASS}
      - DB_USER=${DB_USER}
      - DB_PORT=${DB_PORT}
      - INDEXER_WORKERS=5
      - REDIS_URI=redis://redis:6379/0
      - WS_PROVIDER_ENDPOINT_URI=${JOYSTREAM_NODE_WS}
      - DB_HOST=db
      - DEBUG=hydra-indexer:substrate-service
      # Block height to start indexing from.
      # Note, that if there are already some indexed events, this setting is ignored
      - BLOCK_HEIGHT=0
      - TYPEORM_LOGGING=error
      - NODE_ENV=${NODE_ENV}
    depends_on:
      - db
      - redis
    command: >
      sh -c "yarn db:bootstrap && yarn start:prod"

  hydra-indexer-gateway:
    image: joystream/hydra-indexer-gateway:5.0.0-alpha.1
    container_name: hydra-indexer-gateway
    restart: unless-stopped
    environment:
      - WARTHOG_STARTER_DB_DATABASE=${INDEXER_DB_NAME}
      - WARTHOG_STARTER_DB_HOST=db
      - WARTHOG_STARTER_DB_PASSWORD=${DB_PASS}
      - WARTHOG_STARTER_DB_PORT=${DB_PORT}
      - WARTHOG_STARTER_DB_USERNAME=${DB_USER}
      - WARTHOG_STARTER_REDIS_URI=redis://redis:6379/0
      - WARTHOG_APP_PORT=${HYDRA_INDEXER_GATEWAY_PORT}
      - PORT=${HYDRA_INDEXER_GATEWAY_PORT}
      # - DEBUG=*
      - NODE_ENV=${NODE_ENV}
    ports:
      - "${HYDRA_INDEXER_GATEWAY_PORT}:${HYDRA_INDEXER_GATEWAY_PORT}"
    depends_on:
      - db
      - redis

  redis:
    image: redis:6.0-alpine
    container_name: redis
    restart: unless-stopped
    ports:
      - "127.0.0.1:6379:6379"

  collector:
    container_name: collector
    image: otel/opentelemetry-collector-contrib:0.80.0
    restart: unless-stopped
    command: ["--config=/etc/otel-collector-config.yaml"]
    volumes:
      - ./otel-collector-config.yaml:/etc/otel-collector-config.yaml
    ports:
      - "127.0.0.1:4317:4317" # OTLP gRPC receiver
      - "127.0.0.1:4318:4318" # OTLP HTTP receiver
    depends_on:
      - apm-server
  apm-server:
    image: docker.elastic.co/apm/apm-server:8.8.0
    container_name: apm-server
    command: |
      --strict.perms=false -e
      -E output.elasticsearch.hosts=["${ELASTIC_URL}"]
      -E output.elasticsearch.username=${ELASTIC_USERNAME}
      -E output.elasticsearch.password=${ELASTIC_PASSWORD}
      -E output.elasticsearch.ssl.verification_mode=none
    ports:
      - 127.0.0.1:8200:8200

  metricbeat:
    image: docker.elastic.co/beats/metricbeat:8.8.0
    container_name: metricbeat
    user: root
    command: |
      -e -system.hostfs=/hostfs
      -E output.elasticsearch.hosts=["${ELASTIC_URL}"]
      -E output.elasticsearch.username=${ELASTIC_USERNAME}
      -E output.elasticsearch.password=${ELASTIC_PASSWORD}
      -E name=${NODE_ID}
    network_mode: host
    environment:
      - DBUS_SYSTEM_BUS_ADDRESS=unix:path=/hostfs/var/run/dbus/system_bus_socket
    volumes:
      - /proc:/hostfs/proc:ro
      - /sys/fs/cgroup:/hostfs/sys/fs/cgroup:ro
      - /:/hostfs:ro
      - /var/run/dbus/system_bus_socket:/hostfs/var/run/dbus/system_bus_socket:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./metricbeat.yml:/usr/share/metricbeat/metricbeat.yml:ro

  caddy:
    image: caddy:2
    container_name: caddy
    restart: unless-stopped
    ports:
      - 80:80 # Needed for the ACME HTTP-01 challenge.
      - 443:443
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile:ro
      - ./caddy/config:/config
      - ./caddy/data:/data
    environment:
      DOMAIN: ${CADDY_DOMAIN}
      LOG_FILE: /data/access.log
      OTEL_EXPORTER_OTLP_TRACES_ENDPOINT: http://collector:4317/
      OTEL_EXPORTER_OTLP_PROTOCOL: http/protobuf
      OTEL_SERVICE_NAME: caddy

  distributor:
    image: joystream/distributor-node:latest
    container_name: distributor
    restart: unless-stopped
    volumes:
      - ${DISTRIBUTOR_KEYSTORE_VOLUME}:/keystore
      - ${DISTRIBUTOR_DATA_VOLUME}:/data
      - ${DISTRIBUTOR_CACHE_VOLUME}:/cache
      - ${DISTRIBUTOR_LOGS_VOLUME}:/logs
      - ${DISTRIBUTOR_SCRATCH_VOLUME}:/scratch
      - ${DISTRIBUTOR_CONFIG_VOLUME}:/joystream/distributor-node/config.yml:ro
      - ./runners/distributor.sh:/joystream/distributor-node/runner.sh:ro
    working_dir: /joystream/distributor-node
    ports:
      - 127.0.0.1:3334:3334 # Public API
      - 127.0.0.1:3335:3335 # Private node operator API
    environment:
      ENABLE_TELEMETRY: ${ENABLE_TELEMETRY:-no}
      OTEL_APPLICATION: distributor-node
      OTEL_EXPORTER_OTLP_ENDPOINT: http://collector:4318
      OTEL_RESOURCE_ATTRIBUTES: service.name=argus,deployment.environment=production
      NODE_ENV: production
      JOYSTREAM_DISTRIBUTOR__ID: ${NODE_ID}
      JOYSTREAM_DISTRIBUTOR__LOGS__ELASTIC__ENDPOINT: ${ELASTIC_URL}
      JOYSTREAM_DISTRIBUTOR__LOGS__ELASTIC__AUTH__USERNAME: ${ELASTIC_USERNAME}
      JOYSTREAM_DISTRIBUTOR__LOGS__ELASTIC__AUTH__PASSWORD: ${ELASTIC_PASSWORD}
    entrypoint: ["/joystream/distributor-node/runner.sh"]
    command: ["start"]

  storage:
    image: joystream/storage-node:4.0.0
    container_name: storage
    restart: unless-stopped
    volumes:
      - ${STORAGE_KEYSTORE_VOLUME}:/keystore
      - ${STORAGE_DATA_VOLUME}:/data
      - ${STORAGE_LOGS_VOLUME}:/logs
      - ./runners/storage.sh:/joystream/storage-node/runner.sh:ro
    working_dir: /joystream/storage-node
    ports:
      - 3333:3333
    environment:
      ENABLE_TELEMETRY: ${ENABLE_TELEMETRY:-no}
      OTEL_APPLICATION: storage-node
      OTEL_EXPORTER_OTLP_ENDPOINT: http://collector:4318
      OTEL_RESOURCE_ATTRIBUTES: service.name=colossus,deployment.environment=production
      NODE_ENV: ${NODE_ENV}
    entrypoint: ["/joystream/storage-node/runner.sh"]
    command: "
      server
      --worker 1000
      --port 3333
      --uploads /data
      --sync
      --syncInterval 1
      --syncWorkersNumber 20
      --storageSquidEndpoint http://squid-graphql-server:${SQUID_GQL_PORT}/graphql
      --apiUrl ${JOYSTREAM_NODE_WS}
      --logFilePath /logs
      --logFileChangeFrequency none
      --keyFile /keystore/keyfile.json
      "

  squid-db:
    container_name: squid-db
    hostname: squid-db
    image: postgres:16
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${SQUID_DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASS}
      PGPORT: ${SQUID_DB_PORT}
    command: [ 'postgres', '-c', 'config_file=/etc/postgresql/postgresql.conf', '-p', '${SQUID_DB_PORT}' ]
    shm_size: 1.1g # A bit higher than `shared_buffers` value in postgres.conf
    volumes:
      - squid-db-data:/var/lib/postgresql/data
      - ./postgres.conf:/etc/postgresql/postgresql.conf:ro

  squid-processor:
    image: joystream/storage-squid:1.4.4
    container_name: squid-processor
    hostname: squid-processor
    restart: unless-stopped
    environment:
      - DB_NAME=${SQUID_DB_NAME}
      - DB_PASS=${DB_PASS}
      - DB_USER=${DB_USER}
      - DB_PORT=${SQUID_DB_PORT}
      - DB_HOST=squid-db
      - GQL_PORT=${SQUID_GQL_PORT}
      - ARCHIVE_GATEWAY_URL=${SQUID_ARCHIVE_GATEWAY_URL}
      - RPC_ENDPOINT=${JOYSTREAM_NODE_WS}
      - RPC_RATE_LIMIT=${SQUID_RPC_RATE_LIMIT}
    depends_on:
      - squid-db
    command: >
      sh -c "npx squid-typeorm-migration apply && \
             node -r dotenv-expand/config lib/processor.js"
  squid-graphql-server:
    image: joystream/storage-squid:1.4.4
    container_name: squid-graphql-server
    hostname: squid-graphql-server
    restart: unless-stopped
    environment:
      - DB_NAME=${SQUID_DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASS=${DB_PASS}
      - DB_PORT=${SQUID_DB_PORT}
      - DB_HOST=squid-db
      - GQL_PORT=${SQUID_GQL_PORT}
    depends_on:
      - squid-db
    command: [ 'npm', 'run', 'graphql-server-start' ]
    ports:
      - '127.0.0.1:${SQUID_GQL_PORT}:${SQUID_GQL_PORT}'

volumes:
  squid-db-data: {}

networks:
  default:
    name: joystream_default
    # external: true
